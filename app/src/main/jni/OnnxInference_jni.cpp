/* DO NOT EDIT THIS FILE - it is machine generated */
#ifndef _Included_com_example_funscitech_OnnxInference
#define _Included_com_example_funscitech_OnnxInference
#include <android/asset_manager_jni.h>
#include <android/bitmap.h>
#include <android/log.h>
/* Header for class com_example_myopencv_OnnxInference */
#include <jni.h>
#include "net.h"
#include "benchmark.h"
static ncnn::UnlockedPoolAllocator g_blob_pool_allocator;
static ncnn::PoolAllocator g_workspace_pool_allocator;
#define MIN2(a, b) ((a) < (b) ? (a) : (b))
#define MAX2(a, b) ((a) > (b) ? (a) : (b))
#define CLIP3(x, a, b) MIN2(MAX2(a, x), b)

//#ifdef __cpluspluss
extern "C" {
//#endif
static ncnn::Net transfernet;

JNIEXPORT jint JNI_OnLoad(JavaVM* vm, void* reserved)
{
    __android_log_print(ANDROID_LOG_DEBUG, "transferNcnn", "JNI_OnLoad");

    ncnn::create_gpu_instance();

    return JNI_VERSION_1_4;
}

JNIEXPORT void JNI_OnUnload(JavaVM* vm, void* reserved)
{
    __android_log_print(ANDROID_LOG_DEBUG, "transferNcnn", "JNI_OnUnload");

    ncnn::destroy_gpu_instance();
}
/*
 * Class:     com_example_myopencv_OnnxInference
 * Method:    Init
 * Signature: (Landroid/content/res/AssetManager;)Z
 */
JNIEXPORT jboolean JNICALL JNICALL Java_com_example_funscitech_OnnxInference_Init(JNIEnv *env, jobject, jobject assetManager)
{
    ncnn::Option opt;
    opt.lightmode = true;
    opt.num_threads = 4;
    opt.use_vulkan_compute = false;
    opt.blob_allocator = &g_blob_pool_allocator;
    opt.workspace_allocator = &g_workspace_pool_allocator;

    // use vulkan compute
    if (ncnn::get_gpu_count() != 0)
        opt.use_vulkan_compute = true;

    AAssetManager* mgr = AAssetManager_fromJava(env, assetManager);
    transfernet.opt = opt;

    int ret = transfernet.load_param(mgr,"face_paint_512_v2_sim_sim_opt.param");
    if (ret != 0) {
        __android_log_print(ANDROID_LOG_DEBUG, "transferNcnn", "load_param failed");
        return JNI_FALSE;
    }
//    ret = transfernet.load_model(mgr, "face_paint_512_v2-sim-opt");
    ret = transfernet.load_model(mgr, "face_paint_512_v2_sim_sim_opt.bin");
    if (ret != 0) {
        __android_log_print(ANDROID_LOG_DEBUG, "transferNcnn", "load_model failed");
        return JNI_FALSE;
    }
    __android_log_print(ANDROID_LOG_DEBUG, "transferNcnn", "load_model success");
    return JNI_TRUE;
}

/*
 * Class:     com_example_myopencv_OnnxInference
 * Method:    inference
 * Signature: (Landroid/graphics/Bitmap;Z)Z
 */
JNIEXPORT jboolean JNICALL Java_com_example_funscitech_OnnxInference_inference
        (JNIEnv *env, jobject, jobject bitmap, jboolean useGpu) {
    if (ncnn::get_gpu_count() != 0) {
        useGpu= true;
    } else {
        useGpu = false;
        __android_log_print(ANDROID_LOG_INFO, "transferNcnn", "phone no gpu");
    }

    double startTime = ncnn::get_current_time();

    AndroidBitmapInfo info;
    AndroidBitmap_getInfo(env, bitmap, &info);
    if (info.format != ANDROID_BITMAP_FORMAT_RGBA_8888){
        return JNI_FALSE;
    }

    const int width = info.width;
    const int height = info.width;
    const int size = 512;
//    const int size = 1024;
    const int step = size * size;

    ncnn::Mat src = ncnn::Mat::from_android_bitmap_resize
            (env, bitmap, ncnn::Mat::PIXEL_RGB,size, size);
    const float norm_vals[3] = {2 / 255.f, 2 / 255.f, 2 / 255.f};
    src.substract_mean_normalize(0, norm_vals); // 0255~01
    __android_log_print(ANDROID_LOG_INFO, "transferNcnn", "input deal 0");
    ncnn::Mat src1;
    src1.clone_from(src);
    for (int i = 0; i < size; i++) {
        for (int j = 0; i < size; i++) {
            src1[i * size + j] = src[i * size + j] - 1;
            src1[step + i * size + j] = src[step + i * size + j] - 1;
            src1[2 * step + i * size + j] = src[2 * step + i * size + j] - 1;
        }
    }
    __android_log_print(ANDROID_LOG_INFO, "transferNcnn", "input deal 1");

    ncnn::Mat out;
    ncnn::Extractor ex = transfernet.create_extractor();
    ex.set_vulkan_compute(useGpu);
    ex.input("input", src1);
    ex.extract("output", out);
    __android_log_print(ANDROID_LOG_INFO, "transferNcnn", "model inference end");

    ncnn::Mat out1;
    out1.clone_from(out);
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            out1[i * size + j] = CLIP3((CLIP3(out[i * size + j], -1, 1) * 0.5 + 0.5) * 255, 0, 255);
            out1[step + i * size + j] = CLIP3((CLIP3(out[step + i * size + j], -1, 1) * 0.5 + 0.5) * 255, 0, 255);
            out1[2 * step + i * size + j] = CLIP3((CLIP3(out[2 * step + i * size + j], -1, 1) * 0.5 + 0.5) * 255, 0, 255);
        }
    }
    __android_log_print(ANDROID_LOG_INFO, "transferNcnn", "out process end");

    out1.to_android_bitmap(env, bitmap, ncnn::Mat::PIXEL_RGB);
    __android_log_print(ANDROID_LOG_INFO, "transferNcnn", "mat2map end");

    double end = ncnn::get_current_time() - startTime;
    __android_log_print(ANDROID_LOG_DEBUG, "transferNcnn", "qdq %.2fms   styletransfer", end);
    return JNI_TRUE;
}

//#ifdef __cplusplus
}
//#endif

#endif
